{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CreateTodo/CreateTodo.jsx","App.js","index.js"],"names":["TodoList","todos","handleCompleted","deleteTodo","editTodo","handleTodoTitle","saveChangeTitle","show","className","filter","todo","completed","map","key","id","edit","type","value","onChange","checked","onDoubleClick","title","onClick","event","onKeyPress","onBlur","CreateTodo","pushTodo","useState","newTodo","setNewTodo","target","preventDefault","length","placeholder","App","setShow","filterTodos","every","some","htmlFor","outside","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4b035780.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const TodoList = ({\n  todos,\n  handleCompleted,\n  deleteTodo,\n  editTodo,\n  handleTodoTitle,\n  saveChangeTitle,\n  show,\n}) => (\n  <ul className=\"todo-list\">\n    {todos.filter((todo) => {\n      switch (show) {\n        case 'completed':\n          return todo.completed;\n        case 'active':\n          return !todo.completed;\n        default:\n          return true;\n      }\n    })\n      .map(todo => (\n        <li\n          key={todo.id}\n          className={`${todo.edit && 'editing'}\n          ${todo.completed && 'completed'}`}\n        >\n          <div className=\"view\">\n            <input\n              type=\"checkbox\"\n              className=\"toggle\"\n              value={todo.id}\n              onChange={handleCompleted}\n              checked={todo.completed && true}\n            />\n            <label\n              onDoubleClick={() => editTodo(todo.id)}\n            >\n              {todo.title}\n            </label>\n            <button\n              value={todo.title}\n              type=\"button\"\n              className=\"destroy\"\n              onClick={deleteTodo}\n            />\n          </div>\n          <input\n            type=\"text\"\n            className=\"edit\"\n            value={todo.title}\n            onChange={event => handleTodoTitle(event, todo.id)}\n            onKeyPress={event => saveChangeTitle(event, todo.id)}\n            onBlur={event => saveChangeTitle(event, todo.id, true)}\n          />\n        </li>\n      ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  handleCompleted: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  editTodo: PropTypes.func.isRequired,\n  handleTodoTitle: PropTypes.func.isRequired,\n  saveChangeTitle: PropTypes.func.isRequired,\n  show: PropTypes.string.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const CreateTodo = ({ todos, pushTodo }) => {\n  const [newTodo, setNewTodo] = useState({\n    title: '',\n    completed: false,\n  });\n\n  const handleNewTodo = (event) => {\n    setNewTodo({\n      ...newTodo,\n      title: event.target.value,\n    });\n  };\n\n  const handleKey = (event) => {\n    if (event.key === 'Enter') {\n      event.preventDefault();\n      setNewTodo({\n        ...newTodo,\n        id: todos.length + 1,\n        title: '',\n      });\n\n      pushTodo(newTodo.title);\n    }\n  };\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <form>\n        <input\n          type=\"text\"\n          value={newTodo.title}\n          onChange={handleNewTodo}\n          onKeyPress={handleKey}\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n        />\n      </form>\n    </header>\n  );\n};\n\nCreateTodo.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  pushTodo: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\n\nimport { TodoList } from './components/TodoList';\nimport { CreateTodo } from './components/CreateTodo';\n\nfunction App() {\n  const [todos, pushTodo] = useState([]);\n  const [show, setShow] = useState('all');\n\n  const setTodos = (title) => {\n    pushTodo([\n      ...todos,\n      {\n        id: todos.length + 1,\n        title,\n        completed: false,\n      },\n    ]);\n  };\n\n  const handleCompleted = (event) => {\n    pushTodo(todos.map(todo => (\n      todo.id === +event.target.value\n        ? {\n          ...todo,\n          completed: !todo.completed,\n        }\n        : { ...todo }\n    )));\n  };\n\n  const deleteTodo = (event) => {\n    pushTodo(todos.filter(todo => todo.title !== event.target.value));\n  };\n\n  const editTodo = (id) => {\n    pushTodo(todos.map(todo => (\n      todo.id === id\n        ? {\n          ...todo,\n          edit: true,\n        }\n        : { ...todo }\n    )));\n  };\n\n  const handleTodoTitle = (event, id) => {\n    pushTodo(todos.map(todo => (\n      todo.id === id\n        ? {\n          ...todo,\n          title: event.target.value,\n        }\n        : { ...todo }\n    )));\n  };\n\n  const saveChangeTitle = (event, id, outside) => {\n    (outside || event.key === 'Enter') && (event.target.value === ''\n      ? deleteTodo(event)\n      : pushTodo(todos.map(todo => (\n        todo.id === id\n          ? {\n            id: todo.id,\n            title: event.target.value,\n            completed: todo.completed,\n          }\n          : { ...todo }\n      ))));\n  };\n\n  const allCompleted = () => {\n    if (todos.some(todo => !todo.completed)) {\n      pushTodo(todos.map(todo => ({\n        ...todo,\n        completed: true,\n      })));\n    } else {\n      pushTodo(todos.map(todo => ({\n        ...todo,\n        completed: false,\n      })));\n    }\n  };\n\n  const deleteCompletedTodos = () => {\n    pushTodo(todos.filter(todo => !todo.completed));\n  };\n\n  const filterTodos = (event) => {\n    setShow(event.target.value);\n  };\n\n  return (\n    <section className=\"todoapp\">\n      <CreateTodo\n        todos={todos}\n        pushTodo={setTodos}\n      />\n\n      <section className=\"main\">\n        {todos.length > 0 && (\n          <>\n            <input\n              type=\"checkbox\"\n              id=\"toggle-all\"\n              checked={todos.every(todo => todo.completed)}\n              className=\"toggle-all\"\n              onChange={allCompleted}\n            />\n            <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          </>\n        )}\n\n        <TodoList\n          todos={todos}\n          handleCompleted={handleCompleted}\n          deleteTodo={deleteTodo}\n          editTodo={editTodo}\n          handleTodoTitle={handleTodoTitle}\n          saveChangeTitle={saveChangeTitle}\n          show={show}\n        />\n      </section>\n\n      {todos.length > 0 && (\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {todos.filter(todo => !todo.completed).length}\n            {' '}\n            items left\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <button\n                className={show === 'all' ? 'selected' : ''}\n                type=\"button\"\n                value=\"all\"\n                onClick={filterTodos}\n              >\n                All\n              </button>\n            </li>\n\n            <li>\n              <button\n                className={show === 'active' ? 'selected' : ''}\n                type=\"button\"\n                value=\"active\"\n                onClick={filterTodos}\n              >\n                Active\n              </button>\n            </li>\n\n            <li>\n              <button\n                className={show === 'completed' ? 'selected' : ''}\n                value=\"completed\"\n                type=\"button\"\n                onClick={filterTodos}\n              >\n                Completed\n              </button>\n            </li>\n          </ul>\n\n          {todos.some(todo => todo.completed) && (\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={deleteCompletedTodos}\n            >\n              Clear completed\n            </button>\n          )}\n        </footer>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}